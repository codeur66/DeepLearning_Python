# Use on CI Jenkins server on Github repo:

sudo su
systemctl start jenkins
systemctl status jenkins

stores files here: /var/jenkins_home.

# access jeknins:
http://myServer:8080
http://localhost:8080

# logs:
/var/log/jenkins/jenkins.log
# jobs:
/var/lib/jenkins/jobs
#
/var/lib/jenkins/workspace


*********Connection Github and Jenkins***********

# 0. start Jenkins.
# 1. install or check if is installed the git and github plugin in Jenkins.
# 2. check to do polling from Git.
# 3. Jenkins should shave the git project url and the clone url (.git) to automatically
     or to trigger build.


#0.  install ServerXP client to make your local IP public accessible.
    allowing you to expose local or private web servers to the public.
    curl -O https://portal.socketxp.com/download/linux/socketxp && chmod +wx socketxp && sudo mv socketxp /usr/local/bin
# 1. create an account to connect your SocketXP Agent with the SocketXP Cloud Service.
# 2. Get an auth tokken and you copy paste it to your terminal.
# 3. To create a tunnel:
   socketxp connect http://localhost:8080

    or visit for more details:
    https://portal.socketxp.com/#/tunnels

    Get the publicURL from the tunnel and paste it into the Github webhooks:
     ...publicURL/github-webhook/
# 4. In github check the  "Active" and the other options you like  and create the webhook
    With green color means triggered OK, with grey means it is idle yet, with red failed.

************************************************************
*****       Jenkins useful plugins to install     **********
************************************************************
if a plugin is not in the available, download it from the web then:
Jenkins > Manage Jenkins > Plugins > Advanced > Upload the plugin


****** Cubertura plugin *********
-Install Cubertura
-In UI, enable "Publish Coverage Report" publisher in the Post-build Actions of the Job.
-In "Coverage Metrics Targets" section, we can define what we consider to be the minimum
    acceptable levels of code coverage.
    Press "Advanced" button.



****** Build Monitor plugin *********
Monitor with Green for Succeed and Red for failed, the builds in separated windows.

***** Dashboard Plugin View **********


********Pipeline Build Step***********
if not installed throws: java.lang.NoSuchMethodError: No such DSL method 'pipeline' found among steps
link tutorial: https://www.lambdatest.com/blog/jenkins-pipeline-tutorial/

***** Pipeline: REST API *************

***** Metric Plugin ******************

***** Test Results Analyser **********

***** Job DSL Plugin *****************

***** Build Pipeline Plugin *********


******************************************************
********         Errors             ******************
******************************************************
**1**
to do <import> or <from> a module when you got an Error msg: ImportError: No module name
        import sys
        import os
        # jenkins exposes the workspace directory through env.
        sys.path.append(os.environ['WORKSPACE'])
**2**
java.lang.NoSuchMethodError: No such DSL method 'pipeline' found among steps
        install: Pipeline Build Step
**3**

*****************************************************
********          Know How      *********************
*****************************************************
-jenkinsfile should always be in the root directory of the project
-if Jenkins runs slow delete prev build history,
  -  YourJob > Configure > General > Discard Old Builds
  -  Manage Jenkins > Troubleshooting > Manage Old Data
- Disable credential for Jenkins Admin, if you are not in a team:
    do sudo vi /var/lib/jenkins/config.xml
    write :i for edit,
        if you get a W10: Warning: Changing a readonly file
        do : sudo su, then: chmod 777 config.xml
    set <useSecurity>false</useSecurity>
    write :qw, press enter, in terminal write: cat config.xml to see the changes
    do: sudo systemctl restart jenkins
             systemctl status jenkins


****** Code Test Coverage ***********
-pip install coverage
-run tests and populate to HTML through XML:
    coverage run MyDirectory/testMyFile.py 1 1 2 3
    python -m coverage xml -o ./reports/coverage.xml

**to import module**
    in terminal:  export PYTHONPATH="${PYTHONPATH}:/home/nikoscf/PycharmProjects"
    or in python module: sys.path.append("/home/nikoscf/PycharmProjects/")

coverage run test.py
coverage report
# This will create a folder at the current working directory with the name “htmlcov”.Open .html files
coverage html

-In Jeknins:check if is installed <Junit plugin> in Jenkins. Gives quick and easy access to the tests.

